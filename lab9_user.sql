CREATE GLOBAL TEMPORARY TABLE TEMP_TABLE (
    ID NUMBER,
    NAME VARCHAR2(50)
) ON COMMIT PRESERVE ROWS;

INSERT INTO TEMP_TABLE (ID, NAME) VALUES (1, 'value1');
INSERT INTO TEMP_TABLE (ID, NAME) VALUES (2, 'value2');
COMMIT;

SELECT * FROM TEMP_TABLE;

CREATE SEQUENCE S1
    START WITH 1000
    INCREMENT BY 10
    NOMINVALUE
    NOMAXVALUE
    NOCYCLE
    NOCACHE
    NOORDER;

SELECT S1.NEXTVAL FROM DUAL; 
SELECT S1.CURRVAL FROM DUAL; 

CREATE SEQUENCE S2
    START WITH 10
    INCREMENT BY 10
    MAXVALUE 100
    NOCYCLE;
    
SELECT S2.NEXTVAL FROM DUAL; 
SELECT S2.NEXTVAL FROM DUAL; 
SELECT S2.NEXTVAL FROM DUAL; 
SELECT S2.NEXTVAL FROM DUAL; 
SELECT S2.NEXTVAL FROM DUAL; 
SELECT S2.NEXTVAL FROM DUAL; 
SELECT S2.NEXTVAL FROM DUAL; 
SELECT S2.NEXTVAL FROM DUAL; 
SELECT S2.NEXTVAL FROM DUAL; 
SELECT S2.NEXTVAL FROM DUAL; 

SELECT S2.NEXTVAL FROM DUAL; 

CREATE SEQUENCE S3
    START WITH 10
    INCREMENT BY -10
    MINVALUE -100
    MAXVALUE 10
    NOCYCLE
    ORDER;
    
SELECT S3.NEXTVAL FROM DUAL; 
SELECT S3.NEXTVAL FROM DUAL; 
SELECT S3.NEXTVAL FROM DUAL; 
SELECT S3.NEXTVAL FROM DUAL; 
SELECT S3.NEXTVAL FROM DUAL; 
SELECT S3.NEXTVAL FROM DUAL; 
SELECT S3.NEXTVAL FROM DUAL; 
SELECT S3.NEXTVAL FROM DUAL; 
SELECT S3.NEXTVAL FROM DUAL; 
SELECT S3.NEXTVAL FROM DUAL;

SELECT S3.NEXTVAL FROM DUAL;
    
CREATE SEQUENCE S4
    START WITH 10
    INCREMENT BY 1
    MINVALUE 10
    MAXVALUE 20
    CYCLE
    CACHE 5
    NOORDER;
    
SELECT S4.NEXTVAL FROM DUAL; 
SELECT S4.NEXTVAL FROM DUAL; 
SELECT S4.NEXTVAL FROM DUAL; 
SELECT S4.NEXTVAL FROM DUAL; 
SELECT S4.NEXTVAL FROM DUAL; 
SELECT S4.NEXTVAL FROM DUAL; 
SELECT S4.NEXTVAL FROM DUAL; 
SELECT S4.NEXTVAL FROM DUAL; 
SELECT S4.NEXTVAL FROM DUAL; 
SELECT S4.NEXTVAL FROM DUAL;
SELECT S4.NEXTVAL FROM DUAL;
SELECT S4.NEXTVAL FROM DUAL;

SELECT SEQUENCE_NAME 
FROM USER_SEQUENCES;

DROP SEQUENCE S1;
DROP SEQUENCE S2;
DROP SEQUENCE S3;
DROP SEQUENCE S4;

CREATE TABLE T1 (
    N1 NUMBER(20),
    N2 NUMBER(20),
    N3 NUMBER(20),
    N4 NUMBER(20)
) CACHE storage(BUFFER_POOL KEEP);

INSERT INTO T1 (N1, N2, N3, N4) VALUES (S1.NEXTVAL, S2.NEXTVAL, S3.NEXTVAL, S4.NEXTVAL);
INSERT INTO T1 (N1, N2, N3, N4) VALUES (S1.NEXTVAL, S2.NEXTVAL, S3.NEXTVAL, S4.NEXTVAL);
INSERT INTO T1 (N1, N2, N3, N4) VALUES (S1.NEXTVAL, S2.NEXTVAL, S3.NEXTVAL, S4.NEXTVAL);
INSERT INTO T1 (N1, N2, N3, N4) VALUES (S1.NEXTVAL, S2.NEXTVAL, S3.NEXTVAL, S4.NEXTVAL);
INSERT INTO T1 (N1, N2, N3, N4) VALUES (S1.NEXTVAL, S2.NEXTVAL, S3.NEXTVAL, S4.NEXTVAL);
INSERT INTO T1 (N1, N2, N3, N4) VALUES (S1.NEXTVAL, S2.NEXTVAL, S3.NEXTVAL, S4.NEXTVAL);
INSERT INTO T1 (N1, N2, N3, N4) VALUES (S1.NEXTVAL, S2.NEXTVAL, S3.NEXTVAL, S4.NEXTVAL);
COMMIT;

CREATE CLUSTER ABC (
    X NUMBER(10),
    V VARCHAR2(12)
) HASHKEYS 200;

CREATE TABLE A (
    XA NUMBER(10),
    VA VARCHAR2(12),
    FirstRandomColumn int
) CLUSTER ABC (XA, VA);

CREATE TABLE B (
    XB NUMBER(10),
    VB VARCHAR2(12),
    SecondRandomColumn int
) CLUSTER ABC (XB, VB);

CREATE TABLE C (
    XC NUMBER(10),
    VC VARCHAR2(12),
    ThirdRandomColumn int
) CLUSTER ABC (XC, VC);

SELECT TABLE_NAME FROM USER_TABLES;

SELECT CLUSTER_NAME FROM USER_CLUSTERS;

CREATE SYNONYM C_SYN FOR MDS.C;

INSERT INTO C_SYN (XC, VC, ThirdRandomColumn) VALUES (1, 'test', 123);
COMMIT;

SELECT * FROM C_SYN;

CREATE PUBLIC SYNONYM B_PSYN FOR MDS.B;

INSERT INTO B_PSYN (XB, VB, SecondRandomColumn) VALUES (2, 'test', 123);
COMMIT;

SELECT * FROM B_PSYN;

CREATE TABLE D (
    ID NUMBER(10) PRIMARY KEY,
    NAME NVARCHAR2(50)
);

CREATE TABLE E (
    E_ID NUMBER(10) PRIMARY KEY,
    D_ID NUMBER(10),
    DESCRIPTION NVARCHAR2(50),
    FOREIGN KEY (D_ID) REFERENCES D(ID)
);

INSERT INTO D (ID, NAME) VALUES (1, 'Артем');
INSERT INTO D (ID, NAME) VALUES (2, 'Мария');
INSERT INTO E (E_ID, D_ID, DESCRIPTION) VALUES (1, 1, 'Едишь');
INSERT INTO E (E_ID, D_ID, DESCRIPTION) VALUES (2, 2, 'Четверг');
COMMIT;

CREATE VIEW V1 AS
SELECT D.ID, D.NAME, E.DESCRIPTION
FROM D
INNER JOIN E ON D.ID = E.D_ID;

SELECT * FROM V1;

CREATE MATERIALIZED VIEW LOG ON D
WITH PRIMARY KEY, ROWID
INCLUDING NEW VALUES;

CREATE MATERIALIZED VIEW LOG ON E
WITH PRIMARY KEY, ROWID
INCLUDING NEW VALUES;

CREATE MATERIALIZED VIEW MV_MDS
REFRESH FAST
START WITH SYSDATE
NEXT SYSDATE + NUMTODSINTERVAL(2, 'MINUTE')
AS
SELECT D.ID, D.NAME, E.DESCRIPTION
FROM D
INNER JOIN E ON D.ID = E.D_ID;

SELECT * FROM MV_MDS;

INSERT INTO D (ID, NAME) VALUES (3, 'Ян');
INSERT INTO E (E_ID, D_ID, DESCRIPTION) VALUES (3, 3, 'Шара');
COMMIT;

CREATE PUBLIC DATABASE LINK DBLINK_MDS_TNS
CONNECT TO MDS_TNS
IDENTIFIED BY mds123
USING 'FREE';

SELECT * FROM REMOTE_TABLE@DBLINK_MDS_TNS;

INSERT INTO REMOTE_TABLE@DBLINK_MDS_TNS (ID, str) 
VALUES (4, 'added by DBlink');
COMMIT;

UPDATE REMOTE_TABLE@DBLINK_MDS_TNS 
SET str = 'updated by DBlink' 
WHERE ID = 1;
COMMIT;

DELETE FROM REMOTE_TABLE@DBLINK_MDS_TNS 
WHERE ID = 2;
COMMIT;

BEGIN
    REMOTE_PROC@DBLINK_MDS_TNS;
END;




